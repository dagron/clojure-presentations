Why Clojure?

* Elegant
** interactive environment (evaluation, help, source)
** sequence examples (map, filter)
** higher-order functions and closures
** blocks vs. anonymous functions
** ActiveSupport Comparison
** data types, reader macros (symbols, keywords)
** data structures are functions
** keywords are functions
** destructuring
** metadata
* Sequence Library
Ruby is pretty good about this, but: CGI
** reduce
** comprehension
** treating things as seqs (xml, directory structures)
** managing infinite collections
** doall, realization
* Functional Programming
** pure functions
** referential transparency
** immutability
** shared structure
** recur
** laziness
** memoization
* Concurrency
** stm
** unified update model
* Mutable / Immutable Model
** snake
* How do I do O-O?
** encapsulation <-> private, closures
** polymorphism <-> multimethods
** reuse <-> calling functions, wrapping functions, chaining functions
* Code as data / macros
* Easy, fast Java interop
** interop
** sugared forms
** threading
** type hints, *warn-on-reflection*
* Ruby-inspired libraries
** compojure
** clj-record
